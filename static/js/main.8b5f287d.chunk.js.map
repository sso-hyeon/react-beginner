{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","list","localStorage","getItem","listData","JSON","parse","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","setItem","stringify","category","filter","toDo","AddBtn","styled","button","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","Li","li","Buttons","div","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","Container","Title","h1","ToDoBox","List","ul","ToDoList","useRecoilState","setCategory","value","onInput","map","todo","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","Helmet","href","rel","ReactDOM","render","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.8b5f287d.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nconst list = localStorage.getItem(\"toDoList\");\nconst listData = JSON.parse(list as any);\n\nexport enum Categories {\n    \"TO_DO\" = \"TO_DO\",\n    \"DOING\" = \"DOING\",\n    \"DONE\" = \"DONE\"\n}\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    default: Categories.TO_DO\n});\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: listData || []\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        localStorage.setItem(\"toDoList\", JSON.stringify(toDos));\n        const category = get(categoryState);\n        return toDos.filter(toDo => toDo.category === category);\n    }\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { categoryState, toDoState } from \"../atoms\";\n\nconst AddBtn = styled.button`\n    background-color: transparent;\n    font-size: 30px;\n    width: 40px;\n    color: white;\n    border: 1px solid white;\n    &:hover {\n        color: #55d8c1;\n        border: 1px solid #55d8c1;\n    }\n`;\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction CreateToDo() {\n    const setToDos = useSetRecoilState(toDoState);\n    const category = useRecoilValue(categoryState);\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    const handleValue = ({ toDo }: IForm) => {\n        setToDos(oldToDos => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\n        setValue(\"toDo\", \"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit(handleValue)}>\n            <input\n                {...register(\"toDo\", { required: \"Please write a To Do\" })}\n                placeholder=\"Write a to do\"\n            />\n            <AddBtn>+</AddBtn>\n        </form>\n    );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nconst Li = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 20px;\n    line-height: 50px;\n    span {\n        text-indent: 20px;\n    }\n`;\n\nconst Buttons = styled.div`\n    display: inline-block;\n    button {\n        font-size: 18px;\n        font-family: \"Mali\", cursive, sans-serif;\n        margin: 0;\n        padding: 0 5px;\n        border: none;\n        outline: none;\n        line-height: 50px;\n        margin-left: 5px;\n        vertical-align: middle;\n        background-color: transparent;\n        color: white;\n        cursor: pointer;\n        transition: transform 0.1s linear;\n    }\n    button:hover {\n        color: #55d8c1;\n        transform: scale(1.1);\n    }\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const {\n            currentTarget: { name }\n        } = event;\n        setToDos(oldToDos => {\n            const targetIndex = oldToDos.findIndex(toDo => toDo.id === id);\n            const newToDo = { text, id, category: name as any };\n            return [\n                ...oldToDos.slice(0, targetIndex),\n                newToDo,\n                ...oldToDos.slice(targetIndex + 1)\n            ];\n        });\n    };\n    const onDelete = () => {\n        setToDos(oldToDos => {\n            const targetIndex = oldToDos.findIndex(toDo => toDo.id === id);\n            return [\n                ...oldToDos.slice(0, targetIndex),\n                ...oldToDos.slice(targetIndex + 1)\n            ];\n        });\n    };\n\n    return (\n        <Li>\n            <span>{text}</span>\n            <Buttons>\n                {category !== Categories.DOING && (\n                    <button name={Categories.DOING} onClick={onClick}>\n                        Doingüåû\n                    </button>\n                )}\n                {category !== Categories.TO_DO && (\n                    <button name={Categories.TO_DO} onClick={onClick}>\n                        To Doüìù\n                    </button>\n                )}\n                {category !== Categories.DONE && (\n                    <button name={Categories.DONE} onClick={onClick}>\n                        Doneüåà\n                    </button>\n                )}\n                <button onClick={onDelete}>‚ùå</button>\n            </Buttons>\n        </Li>\n    );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nconst Container = styled.div`\n    width: 700px;\n    margin: 0 auto;\n`;\nconst Title = styled.h1`\n    text-align: center;\n    font-size: 30px;\n    font-weight: 600;\n    line-height: 20vh;\n    border-bottom: 1px solid white;\n`;\n\nconst ToDoBox = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 40px 0;\n    input,\n    select,\n    button {\n        outline: none;\n        margin: 0 10px;\n        box-sizing: border-box;\n        vertical-align: middle;\n        line-height: 40px;\n        padding: 0;\n    }\n    input {\n        text-indent: 10px;\n        font-size: 20px;\n        width: 400px;\n        font-family: \"Mali\", cursive;\n    }\n    select {\n        text-indent: 10px;\n        font-size: 20px;\n        width: 120px;\n        font-family: \"Mali\", cursive;\n    }\n`;\n\nconst List = styled.ul`\n    text-align: center;\n    li {\n        border-bottom: 1px solid #eee;\n    }\n    li:last-child {\n        border-bottom: 0;\n    }\n`;\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const [category, setCategory] = useRecoilState(categoryState);\n    const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n        setCategory(event.currentTarget.value as any);\n    };\n\n    return (\n        <Container>\n            <Title>To Do List</Title>\n            <ToDoBox>\n                <select value={category} onInput={onInput}>\n                    <option value={Categories.TO_DO}>To Do</option>\n                    <option value={Categories.DOING}>Doing</option>\n                    <option value={Categories.DONE}>Done</option>\n                </select>\n                <CreateToDo />\n            </ToDoBox>\n            <List>\n                {toDos?.map(todo => (\n                    <ToDo key={todo.id} {...todo} />\n                ))}\n            </List>\n        </Container>\n    );\n}\n\nexport default ToDoList;\n","import { Helmet } from \"react-helmet\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content: '';\r\n    content: none;\r\n  }\r\n  table {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    font-weight: 300;\r\n    font-family: 'Mali', cursive ,sans-serif;\r\n    background-color:${props => props.theme.bgColor};\r\n    color:${props => props.theme.textColor};\r\n    line-height: 1.2;\r\n  }\r\n  body::-webkit-scrollbar {\r\n    width:5px;\r\n    background-color:#eee\r\n  }\r\n  body::-webkit-scrollbar-thumb {\r\n    background-color: #55D8C1;\r\n  }\r\n  a {\r\n    text-decoration:none;\r\n    color:inherit;}`;\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <link\r\n                    href=\"https://fonts.googleapis.com/css2?family=Indie+Flower&family=Mali:wght@300;400;500;600&display=swap\"\r\n                    rel=\"stylesheet\"\r\n                />\r\n                <title>TO DO LIST</title>\r\n            </Helmet>\r\n            <GlobalStyle />\r\n            <ToDoList />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n    <>\n        <RecoilRoot>\n            <ThemeProvider theme={darkTheme}>\n                <App />\n            </ThemeProvider>\n        </RecoilRoot>\n    </>,\n    document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: \"#2f3640\",\n    textColor: \"white\",\n    accentColor: \"#9c88ff\",\n    cardBgColor: \"transparent\"\n};\n"],"sourceRoot":""}